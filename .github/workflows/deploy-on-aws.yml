name: Deploy on AWS Server

on:
  workflow_run:
    workflows: ["SCA Scan on SNYK"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1
    
        - name: Set up AWS SSH
          run: |
                mkdir -p ~/.ssh
                echo "${{ secrets.AWS_KEY_PAIR_MUMBAI }}" > ~/.ssh/MyKeyPair.pem
                chmod 600 ~/.ssh/MyKeyPair.pem

        - name: Launch EC2 Instance
          id: launch_ec2
          run: |
            INSTANCE_ID=$(aws ec2 run-instances --image-id ami-078264b8ba71bc45e --count 1 --instance-type t2.micro --key-name AWS_KEY_PAIR_MUMBAI --security-group-ids sg-07afad8b77062b7a3 --query 'Instances[0].InstanceId' --output text)
            echo "Launched instance ID: $INSTANCE_ID"
            echo "::set-output name=instance_id::$INSTANCE_ID"

        - name: Wait for EC2 Instance to be Running
          run: |
            aws ec2 wait instance-running --instance-ids ${{ steps.launch_ec2.outputs.instance_id }}
            sleep 10

        - name: Get EC2 Instance IP Address
          id: get_ip
          run: |
            EC2_IP=$(aws ec2 describe-instances --instance-ids ${{ steps.launch_ec2.outputs.instance_id }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo "EC2 Public IP is $EC2_IP"
            echo "::set-output name=ec2_ip::$EC2_IP"

        - name: Install Dependencies and Run App on EC2 Instance
          run: |
            EC2_IP=${{ steps.get_ip.outputs.ec2_ip }}
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -i ~/.ssh/MyKeyPair.pem ec2-user@$EC2_IP <<EOF
                            
                # Step1: Update and install necessary packages
                sudo yum update -y
                sudo yum install python3 python3-pip git jq -y
                
                # Step2: Clone the Django app repository and install requirements 
                cd /home/ec2-user/
                git clone https://github.com/Lonewolfrex/cyberdemo.git
                cd cyberdemo
                pip3 install -r requirements.txt
                cd contactListApp
                
                # Step3: Update settings for ALLOWED_HOSTS and collect static files 
                sed -i "s/^ALLOWED_HOSTS = .*/ALLOWED_HOSTS = ['$EC2_IP', 'localhost', '127.0.0.1']/" contactListApp/settings.py
                python3 manage.py collectstatic --noinput

                # Step4: Run migrations to set up the database and Start the Django development server 
                python3 manage.py makemigrations
                python3 manage.py migrate
                python3 manage.py runserver 0.0.0.0:8000 &
                sleep 10

                # Step5: 
                chmod 777 /home/ec2-user/cyberdemo/contactListApp/contactListApp/zap_scripts/zap_scan.sh
                bash /home/ec2-user/cyberdemo/contactListApp/contactListApp/zap_scripts/zap_scan.sh

                # Step6 :
                if [ -f /home/ec2-user/ZAP_2.14.0/zap_scan_results.json ]; then
                    echo "File zap_scan_results.json created successfully."
                    cat /home/ec2-user/ZAP_2.14.0/zap_scan_results.json  # Optional debug output of file contents.
                    pkill -f manage.py || true
                    pkill -f zap-2.14.0.jar || true
                    echo "Django server and ZAP processes terminated."

                else
                    echo "Failed to create zap_scan_results.json."
                    exit 1
                fi
                exit
            EOF

        - name: Set EC2 IP Address Output
          id: set_output
          run: 
            echo "EC2_IP=${{ steps.get_ip.outputs.ec2_ip }}" >> $GITHUB_ENV
            echo "EC2_INSTANCE_ID=${{ steps.launch_ec2.outputs.instance_id }}" >> $GITHUB_ENV
             