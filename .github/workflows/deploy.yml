name: Deploy Django App

on:
  push:
    branches:
      - main  # Change to your main branch
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Remove Older Java Versions
        run: |
          sudo apt-get purge openjdk*
          sudo apt-get autoremove

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Check Java Version
        run: java -version

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Download a compatible version of SonarScanner with error handling
          curl -L -sSLo sonarqube-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
          
          # Check if the download was successful
          if [ ! -f sonarqube-scanner.zip ]; then
            echo "Download failed!"
            exit 1
          fi
          
          # Unzip the downloaded scanner
          unzip sonarqube-scanner.zip
          
          # Check if unzip was successful
          if [ $? -ne 0 ]; then
            echo "Unzip failed! The downloaded file may be corrupt."
            exit 1
          fi
  
          # Run SonarScanner
          ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
    
      - name: Set up AWS SSH
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.AWS_KEY_PAIR_MUMBAI }}" > ~/.ssh/MyKeyPair.pem
            chmod 600 ~/.ssh/MyKeyPair.pem

      - name: Launch EC2 Instance and Deploy Django App
        run: |
          # Step 1: Launch EC2 instance and get instance ID
            INSTANCE_ID=$(aws ec2 run-instances --image-id ami-078264b8ba71bc45e --count 1 --instance-type t2.micro --key-name AWS_KEY_PAIR_MUMBAI --security-group-ids sg-07afad8b77062b7a3 --query 'Instances[0].InstanceId' --output text)
            echo "Launched instance ID: $INSTANCE_ID"

          # Step 2: Wait for the instance to be running
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            sleep 10

          # Step 3: Get the EC2 instance IP
            EC2_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo "EC2 Public IP is $EC2_IP"

          # Step 4: Install Python, pip, and other dependencies, then run the app (using SSH)
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/MyKeyPair.pem ec2-user@$EC2_IP <<EOF
            
          # Step5: Download and install OWASP ZAP
            wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
            tar -xzf ZAP_2.14.0_Linux.tar.gz
            cd ZAP_2.14.0/
            sudo yum install java-17 -y
            java -jar zap-2.14.0.jar -daemon -port 8080 -config api.disablekey=true &
          
          # Step6:Update and install necessary packages
            sudo yum update -y
            sudo yum install python3 python3-pip -y
            sudo yum install python3 python3-pip git -y
            cd /home/ec2-user/
            git clone https://github.com/Lonewolfrex/cyberdemo.git
            cd cyberdemo
            
          # Step7: Install requirements 
            pip3 install -r requirements.txt
            cd contactListApp
            sed -i "s/^ALLOWED_HOSTS = .*/ALLOWED_HOSTS = ['$EC2_IP', 'localhost', '127.0.0.1']/" contactListApp/settings.py
            python3 manage.py collectstatic --noinput

          # Step8: Run migrations to set up the database 
            python3 manage.py makemigrations
            python3 manage.py migrate
            
          # Step9: Start the Django development server and scan for vulnerabilities using zap
            python3 manage.py runserver 0.0.0.0:8000 &
            sleep 30

          # Step10: Start the zap
            cd /home/ec2-user/ZAP_2.14.0/
            java -jar zap-2.14.0.jar -daemon -port 8080 -config api.disablekey=true &

          # Step11: Start the scan and get the scan id
            scan_response=$(curl -s "http://127.0.0.1:8080/JSON/spider/action/scan/?url=http://127.0.0.1:8000")
            scan_id=$(echo $scan_response | jq -r '.scan')

          # Step12: Wait for the scan to finish
            while true; do
              status=$(curl -s "http://127.0.0.1:8080/JSON/spider/view/status/?scanId=$scan_id" | jq -r '.status')
              echo "Spider progress: $status%"
              if [ "$status" -eq 100 ]; then
                  echo "Spidering completed!"
                  break
              fi
              sleep 5
            done
            
          # Step13: Get the report
            alerts=$(curl -s "http://127.0.0.1:8080/JSON/core/view/alerts/?baseurl=http://127.0.0.1:8000")
            echo "$alerts" > zap_scan_results.json
            exit
          EOF
           
      - name: Upload zap Scan spidering Results
        uses: actions/upload-artifact@v4
        with:
            name: zap-scan-results
            path: zap_scan_results.json

      - name: Terminate EC2 Instance
        if: always()
        run: |
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-078264b8ba71bc45e --count 1 --instance-type t2.micro --key-name AWS_KEY_PAIR_MUMBAI --security-group-ids sg-07afad8b77062b7a3 --query 'Instances[0].InstanceId' --output text)
          echo "Launched instance ID: $INSTANCE_ID"
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          