name: Deploy Django App

on:
  push:
    branches:
      - main  # Change to your main branch
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Remove Older Java Versions
        run: |
          sudo apt-get purge openjdk*
          sudo apt-get autoremove

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Check Java Version
        run: java -version

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Download a compatible version of SonarScanner with error handling
          curl -L -sSLo sonarqube-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
          
          # Check if the download was successful
          if [ ! -f sonarqube-scanner.zip ]; then
            echo "Download failed!"
            exit 1
          fi
          
          # Unzip the downloaded scanner
          unzip sonarqube-scanner.zip
          
          # Check if unzip was successful
          if [ $? -ne 0 ]; then
            echo "Unzip failed! The downloaded file may be corrupt."
            exit 1
          fi
  
          # Run SonarScanner
          ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
    
      - name: Set up AWS SSH
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.AWS_KEY_PAIR_MUMBAI }}" > ~/.ssh/MyKeyPair.pem
            chmod 600 ~/.ssh/MyKeyPair.pem

      - name: Launch EC2 Instance and Deploy Django App
        run: |
          ZAP_API_KEY=${{ secrets.ZAP_API_KEY }}
          # Step 1: Launch EC2 instance and get instance ID
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-078264b8ba71bc45e --count 1 --instance-type t2.micro --key-name AWS_KEY_PAIR_MUMBAI --security-group-ids sg-07afad8b77062b7a3 --query 'Instances[0].InstanceId' --output text)
          echo "Launched instance ID: $INSTANCE_ID"

          # Step 2: Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Step 3: Associate the Elastic IP with the EC2 instance
          ELASTIC_IP=${{ secrets.AWS_ELASTIC_IP }}
          aws ec2 associate-address --instance-id $INSTANCE_ID --public-ip $ELASTIC_IP
          echo "Associated Elastic IP $ELASTIC_IP with instance ID $INSTANCE_ID"

          # Step 4: Install Python, pip, and other dependencies, then run the app (using SSH)
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/MyKeyPair.pem ec2-user@$ELASTIC_IP <<EOF
            
          # Step5: Download and install OWASP ZAP
            wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
            tar -xzf ZAP_2.14.0_Linux.tar.gz
            cd ZAP_2.14.0/
            sudo yum install java-17 -y
            # Start ZAP in daemon mode with an API key 
            ./zap.sh -daemon -host 0.0.0.0 -port 8081 -config api.key=$ZAP_API_KEY &
            
            # Wait for ZAP to start (adjust time as necessary)
            sleep 30
          
          # Step6:Update and install necessary packages
            sudo yum update -y
            sudo yum install python3 python3-pip -y
            sudo yum install python3 python3-pip git -y
            cd /home/ec2-user/
            git clone https://github.com/Lonewolfrex/cyberdemo.git
            cd cyberdemo
            
          # Install requirements 
            pip3 install -r requirements.txt
            cd contactListApp
            python3 manage.py collectstatic --noinput

          # Run migrations to set up the database 
            python3 manage.py makemigrations
            python3 manage.py migrate
            
          # Start the Django development server and scan for vulnerabilities using zap
            python3 manage.py runserver 0.0.0.0:8000 &
            curl "http://$ELASTIC_IP:8081/JSON/ascan/action/scan/?url=http://$ELASTIC_IP:8000&apikey=$ZAP_API_KEY"
            exit
          EOF
           

      # - name: Terminate EC2 Instance
      #   if: always()
      #   run: |
      #     INSTANCE_ID=$(aws ec2 run-instances --image-id ami-078264b8ba71bc45e --count 1 --instance-type t2.micro --key-name AWS_KEY_PAIR_MUMBAI --security-group-ids sg-07afad8b77062b7a3 --query 'Instances[0].InstanceId' --output text)
      #     echo "Launched instance ID: $INSTANCE_ID"
      #     aws ec2 terminate-instances --instance-ids $INSTANCE_ID